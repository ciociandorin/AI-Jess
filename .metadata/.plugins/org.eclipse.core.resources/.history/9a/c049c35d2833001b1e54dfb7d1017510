(deftemplate assert(slot sold)(slot valoareIntrodusa)(slot moneda(allowed-values Q N)))
(deffacts automat
(assert(sold 0)(valoareIntrodusa 25)(moneda Q))
(assert(sold 25)(valoareIntrodusa 50)(moneda Q))
(assert(sold 50)(valoareIntrodusa 55)(moneda Q))
(assert(sold 25)(valoareIntrodusa 30)(moneda N))
(assert(sold 30)(valoareIntrodusa 55)(moneda Q))
(assert(sold 30)(valoareIntrodusa 35)(moneda N))
(assert(sold 35)(valoareIntrodusa 55)(moneda Q))
(assert(sold 35)(valoareIntrodusa 40)(moneda N))
(assert(sold 40)(valoareIntrodusa 55)(moneda Q))
(assert(sold 40)(valoareIntrodusa 45)(moneda N))
(assert(sold 45)(valoareIntrodusa 55)(moneda Q))
(assert(sold 45)(valoareIntrodusa 50)(moneda N))
(assert(sold 50)(valoareIntrodusa 55)(moneda Q))
(assert(sold 50)(valoareIntrodusa 55)(moneda N))
(assert(sold 0)(valoareIntrodusa 5)(moneda N))
(assert(sold 5)(valoareIntrodusa 30)(moneda Q))
(assert(sold 5)(valoareIntrodusa 10)(moneda N))
(assert(sold 10)(valoareIntrodusa 35)(moneda Q))
(assert(sold 10)(valoareIntrodusa 15)(moneda N))
(assert(sold 15)(valoareIntrodusa 35)(moneda Q))
(assert(sold 15)(valoareIntrodusa 20)(moneda N))
(assert(sold 20)(valoareIntrodusa 45)(moneda Q))
(assert(sold 20)(valoareIntrodusa 25)(moneda N))
)
(reset)
(deftemplate StateHolder(slot inseted-coin)(slot state)(slot value))
(assert(StateHolder(state R)(value 0)))
(defrule reader
?p <- (StateHolder(state R))
=>
(printout t "Q/N (R) :")
(bind ?c (read))
(if(eq ?c R) then (modify ?p (inseted-coin nil)(state R)(value 0))
else (modify ?p (inseted-coin ?c)(state M)))
)
(defrule modifyer
?m <- (StateHolder(inseted-coin ?c)(state M)(value ?v))
(assert(moneda ?c)(valoareIntrodusa ?n)(sold ?v))
=>
(if (eq ?c N) then (bind ?val 5) else (bind ?val 25))
(if (neq ?n 55) then (modify ?m (state R)(value ?n))
else (printout t "Rest :" (- (+ ?v ?val) 55) )
)
)